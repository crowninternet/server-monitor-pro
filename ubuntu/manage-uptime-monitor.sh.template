#!/bin/bash

# Uptime Monitor Pro - Management Script Template for Ubuntu
# Copy this file and customize the paths for your installation

# =============================================================================
# CONFIGURATION - CUSTOMIZE THESE PATHS FOR YOUR INSTALLATION
# =============================================================================

# Installation directory - Change this to your actual installation path
INSTALL_DIR="/opt/uptime-monitor"

# Service name - Should match your systemd service name
SERVICE_NAME="uptime-monitor"

# Service file path - Should match where your service file is located
SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"

# System user - Should match the user in your service file
USER_NAME="uptime-monitor"

# API URL for health checks
API_URL="http://localhost:3000"

# =============================================================================
# FUNCTIONS
# =============================================================================

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Function to check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_error "This script must be run as root (use sudo)"
        print_info "Please run: sudo $0"
        exit 1
    fi
}

# Function to check if service is running
is_service_running() {
    systemctl is-active --quiet "$SERVICE_NAME"
}

# Function to check if API is responding
is_api_responding() {
    curl -s "$API_URL/api/health" > /dev/null 2>&1
}

# Function to show service status
show_status() {
    echo "Checking Uptime Monitor status..."
    echo ""
    
    if is_service_running; then
        print_success "Service is running"
        
        if is_api_responding; then
            print_success "API is responding at $API_URL"
            print_info "Web interface: $API_URL"
        else
            print_warning "API is not responding (may still be starting up)"
        fi
    else
        print_error "Service is not running"
        print_info "Run 'sudo $0 start' to start the service"
    fi
}

# Function to show help
show_help() {
    echo "Uptime Monitor Pro - Management Script for Ubuntu"
    echo ""
    echo "Usage: sudo $0 {command}"
    echo ""
    echo "Commands:"
    echo "  start     - Start the Uptime Monitor service"
    echo "  stop      - Stop the Uptime Monitor service"
    echo "  restart   - Restart the Uptime Monitor service"
    echo "  status    - Check if the service is running"
    echo "  logs      - Show recent log entries"
    echo "  logs-tail - Follow log entries in real-time"
    echo "  test      - Test API connectivity"
    echo "  uninstall - Remove Uptime Monitor completely"
    echo "  help      - Show this help message"
    echo ""
    echo "Configuration:"
    echo "  Install Directory: $INSTALL_DIR"
    echo "  Service Name: $SERVICE_NAME"
    echo "  Service File: $SERVICE_FILE"
    echo "  System User: $USER_NAME"
    echo "  API URL: $API_URL"
    echo ""
}

# =============================================================================
# MAIN COMMAND HANDLER
# =============================================================================

case "$1" in
    start)
        check_root
        echo "Starting Uptime Monitor..."
        
        # Check if service file exists
        if [ ! -f "$SERVICE_FILE" ]; then
            print_error "Service file not found: $SERVICE_FILE"
            print_info "Please run the installer first or check your configuration"
            exit 1
        fi
        
        # Check if install directory exists
        if [ ! -d "$INSTALL_DIR" ]; then
            print_error "Installation directory not found: $INSTALL_DIR"
            print_info "Please run the installer first or check your configuration"
            exit 1
        fi
        
        # Start the service
        systemctl start "$SERVICE_NAME"
        
        # Wait a moment for the service to start
        sleep 2
        
        # Check if it started successfully
        if is_service_running; then
            print_success "Uptime Monitor started successfully!"
            print_info "Web interface: $API_URL"
            
            # Wait a bit more and test API
            sleep 3
            if is_api_responding; then
                print_success "API is responding"
            else
                print_warning "API may still be starting up..."
            fi
        else
            print_error "Failed to start Uptime Monitor"
            print_info "Check the logs for more information: sudo $0 logs"
            exit 1
        fi
        ;;
        
    stop)
        check_root
        echo "Stopping Uptime Monitor..."
        
        # Stop the service
        systemctl stop "$SERVICE_NAME"
        
        # Wait a moment
        sleep 2
        
        if ! is_service_running; then
            print_success "Uptime Monitor stopped successfully!"
        else
            print_warning "Service may still be stopping..."
        fi
        ;;
        
    restart)
        check_root
        echo "Restarting Uptime Monitor..."
        
        # Restart the service
        systemctl restart "$SERVICE_NAME"
        
        # Wait a moment
        sleep 3
        
        if is_service_running; then
            print_success "Uptime Monitor restarted successfully!"
            print_info "Web interface: $API_URL"
            
            if is_api_responding; then
                print_success "API is responding"
            else
                print_warning "API may still be starting up..."
            fi
        else
            print_error "Failed to restart Uptime Monitor"
            print_info "Check the logs for more information: sudo $0 logs"
            exit 1
        fi
        ;;
        
    status)
        show_status
        ;;
        
    logs)
        echo "Recent log entries:"
        echo ""
        journalctl -u "$SERVICE_NAME" --no-pager -n 20
        ;;
        
    logs-tail)
        echo "Following logs in real-time (Press Ctrl+C to stop)..."
        echo ""
        journalctl -u "$SERVICE_NAME" --no-pager -f
        ;;
        
    test)
        echo "Testing API connectivity..."
        echo ""
        if is_api_responding; then
            print_success "API is responding"
            
            # Try to get more detailed info
            echo "API Health Check:"
            curl -s "$API_URL/api/health" | python3 -m json.tool 2>/dev/null || curl -s "$API_URL/api/health"
        else
            print_error "API is not responding"
            print_info "Make sure the service is running: sudo $0 status"
        fi
        ;;
        
    uninstall)
        check_root
        echo "Uninstalling Uptime Monitor Pro..."
        echo ""
        print_warning "This will permanently remove all files and data!"
        echo ""
        read -p "Are you sure you want to continue? (y/N): " -n 1 -r
        echo
        
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo "Stopping service..."
            systemctl stop "$SERVICE_NAME" 2>/dev/null || true
            
            echo "Disabling service..."
            systemctl disable "$SERVICE_NAME" 2>/dev/null || true
            
            echo "Removing service file..."
            rm -f "$SERVICE_FILE"
            
            echo "Removing installation directory..."
            rm -rf "$INSTALL_DIR"
            
            echo "Removing system user..."
            userdel "$USER_NAME" 2>/dev/null || true
            
            echo "Reloading systemd..."
            systemctl daemon-reload
            
            print_success "Uptime Monitor Pro has been completely removed"
        else
            print_info "Uninstall cancelled"
        fi
        ;;
        
    help|--help|-h)
        show_help
        ;;
        
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
