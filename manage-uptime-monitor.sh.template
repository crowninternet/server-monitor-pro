#!/bin/bash

# Uptime Monitor Pro - Management Script Template
# Copy this file and customize the paths for your installation

# =============================================================================
# CONFIGURATION - CUSTOMIZE THESE PATHS FOR YOUR INSTALLATION
# =============================================================================

# Installation directory - Change this to your actual installation path
INSTALL_DIR="$HOME/Documents/uptime-monitor"

# Service name - Should match the Label in your plist file
SERVICE_NAME="com.uptimemonitor"

# Launch agent path - Should match where your plist file is located
LAUNCH_AGENT_PATH="$HOME/Library/LaunchAgents/${SERVICE_NAME}.plist"

# API URL for health checks
API_URL="http://localhost:3000"

# =============================================================================
# FUNCTIONS
# =============================================================================

# Function to print colored output
print_success() {
    echo -e "\033[0;32m✅ $1\033[0m"
}

print_error() {
    echo -e "\033[0;31m❌ $1\033[0m"
}

print_info() {
    echo -e "\033[0;34mℹ️  $1\033[0m"
}

print_warning() {
    echo -e "\033[1;33m⚠️  $1\033[0m"
}

# Function to check if service is running
is_service_running() {
    launchctl list | grep -q "$SERVICE_NAME"
}

# Function to check if API is responding
is_api_responding() {
    curl -s "$API_URL/api/health" > /dev/null 2>&1
}

# Function to show service status
show_status() {
    echo "Checking Uptime Monitor status..."
    echo ""
    
    if is_service_running; then
        print_success "Service is loaded and running"
        
        if is_api_responding; then
            print_success "API is responding at $API_URL"
            print_info "Web interface: $API_URL"
        else
            print_warning "API is not responding (may still be starting up)"
        fi
    else
        print_error "Service is not running"
        print_info "Run '$0 start' to start the service"
    fi
}

# Function to show help
show_help() {
    echo "Uptime Monitor Pro - Management Script"
    echo ""
    echo "Usage: $0 {command}"
    echo ""
    echo "Commands:"
    echo "  start     - Start the Uptime Monitor service"
    echo "  stop      - Stop the Uptime Monitor service"
    echo "  restart   - Restart the Uptime Monitor service"
    echo "  status    - Check if the service is running"
    echo "  logs      - Show recent log entries"
    echo "  logs-tail - Follow log entries in real-time"
    echo "  test      - Test API connectivity"
    echo "  uninstall - Remove Uptime Monitor completely"
    echo "  help      - Show this help message"
    echo ""
    echo "Configuration:"
    echo "  Install Directory: $INSTALL_DIR"
    echo "  Service Name: $SERVICE_NAME"
    echo "  Launch Agent: $LAUNCH_AGENT_PATH"
    echo "  API URL: $API_URL"
    echo ""
}

# =============================================================================
# MAIN COMMAND HANDLER
# =============================================================================

case "$1" in
    start)
        echo "Starting Uptime Monitor..."
        
        # Check if launch agent file exists
        if [ ! -f "$LAUNCH_AGENT_PATH" ]; then
            print_error "Launch agent file not found: $LAUNCH_AGENT_PATH"
            print_info "Please run the installer first or check your configuration"
            exit 1
        fi
        
        # Check if install directory exists
        if [ ! -d "$INSTALL_DIR" ]; then
            print_error "Installation directory not found: $INSTALL_DIR"
            print_info "Please run the installer first or check your configuration"
            exit 1
        fi
        
        # Load the launch agent
        launchctl load "$LAUNCH_AGENT_PATH"
        
        # Wait a moment for the service to start
        sleep 2
        
        # Check if it started successfully
        if is_service_running; then
            print_success "Uptime Monitor started successfully!"
            print_info "Web interface: $API_URL"
            
            # Wait a bit more and test API
            sleep 3
            if is_api_responding; then
                print_success "API is responding"
            else
                print_warning "API may still be starting up..."
            fi
        else
            print_error "Failed to start Uptime Monitor"
            print_info "Check the logs for more information: $0 logs"
            exit 1
        fi
        ;;
        
    stop)
        echo "Stopping Uptime Monitor..."
        
        # Unload the launch agent
        launchctl unload "$LAUNCH_AGENT_PATH" 2>/dev/null || true
        
        # Wait a moment
        sleep 2
        
        if ! is_service_running; then
            print_success "Uptime Monitor stopped successfully!"
        else
            print_warning "Service may still be stopping..."
        fi
        ;;
        
    restart)
        echo "Restarting Uptime Monitor..."
        
        # Stop first
        launchctl unload "$LAUNCH_AGENT_PATH" 2>/dev/null || true
        sleep 2
        
        # Start again
        launchctl load "$LAUNCH_AGENT_PATH"
        sleep 3
        
        if is_service_running; then
            print_success "Uptime Monitor restarted successfully!"
            print_info "Web interface: $API_URL"
            
            if is_api_responding; then
                print_success "API is responding"
            else
                print_warning "API may still be starting up..."
            fi
        else
            print_error "Failed to restart Uptime Monitor"
            print_info "Check the logs for more information: $0 logs"
            exit 1
        fi
        ;;
        
    status)
        show_status
        ;;
        
    logs)
        echo "Recent log entries:"
        echo ""
        
        if [ -f "$INSTALL_DIR/uptime-monitor.log" ]; then
            echo "=== Application Logs ==="
            tail -n 20 "$INSTALL_DIR/uptime-monitor.log"
        else
            print_warning "No application logs found"
        fi
        
        echo ""
        
        if [ -f "$INSTALL_DIR/uptime-monitor-error.log" ]; then
            echo "=== Error Logs ==="
            tail -n 10 "$INSTALL_DIR/uptime-monitor-error.log"
        else
            print_info "No error logs found"
        fi
        ;;
        
    logs-tail)
        echo "Following logs in real-time (Press Ctrl+C to stop)..."
        echo ""
        
        if [ -f "$INSTALL_DIR/uptime-monitor.log" ]; then
            tail -f "$INSTALL_DIR/uptime-monitor.log"
        else
            print_error "Log file not found: $INSTALL_DIR/uptime-monitor.log"
        fi
        ;;
        
    test)
        echo "Testing API connectivity..."
        echo ""
        
        if is_api_responding; then
            print_success "API is responding"
            
            # Try to get more detailed info
            echo "API Health Check:"
            curl -s "$API_URL/api/health" | python3 -m json.tool 2>/dev/null || curl -s "$API_URL/api/health"
        else
            print_error "API is not responding"
            print_info "Make sure the service is running: $0 status"
        fi
        ;;
        
    uninstall)
        echo "Uninstalling Uptime Monitor Pro..."
        echo ""
        print_warning "This will permanently remove all files and data!"
        echo ""
        
        read -p "Are you sure you want to continue? (y/N): " -n 1 -r
        echo
        
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo "Stopping service..."
            launchctl unload "$LAUNCH_AGENT_PATH" 2>/dev/null || true
            
            echo "Removing launch agent..."
            rm -f "$LAUNCH_AGENT_PATH"
            
            echo "Removing installation directory..."
            rm -rf "$INSTALL_DIR"
            
            echo "Removing desktop shortcut..."
            rm -f "$HOME/Desktop/Uptime Monitor Pro.html"
            
            print_success "Uptime Monitor Pro has been completely removed"
        else
            print_info "Uninstall cancelled"
        fi
        ;;
        
    help|--help|-h)
        show_help
        ;;
        
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
