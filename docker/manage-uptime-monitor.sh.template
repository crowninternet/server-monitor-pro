#!/bin/bash

# Uptime Monitor Pro - Docker Management Script Template
# Copy this file and customize the configuration for your installation

# =============================================================================
# CONFIGURATION - CUSTOMIZE THESE SETTINGS FOR YOUR INSTALLATION
# =============================================================================

# Project name - Should match your Docker Compose project
PROJECT_NAME="uptime-monitor"

# Compose file - Path to your docker-compose.yml
COMPOSE_FILE="docker-compose.yml"

# Container name - Should match the container name in docker-compose.yml
CONTAINER_NAME="uptime-monitor-pro"

# API URL for health checks
API_URL="http://localhost:3000"

# Data directories
DATA_DIR="./data"
LOGS_DIR="./logs"

# =============================================================================
# FUNCTIONS
# =============================================================================

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Function to check Docker Compose command
get_compose_cmd() {
    if docker compose version >/dev/null 2>&1; then
        echo "docker compose"
    else
        echo "docker-compose"
    fi
}

# Function to check if container is running
is_container_running() {
    local container_name="$1"
    docker ps --format "table {{.Names}}" | grep -q "^${container_name}$"
}

# Function to check if API is responding
is_api_responding() {
    curl -s "$API_URL/api/health" > /dev/null 2>&1
}

# Function to show service status
show_status() {
    echo "Checking Uptime Monitor status..."
    echo ""
    
    COMPOSE_CMD=$(get_compose_cmd)
    
    if is_container_running "$CONTAINER_NAME"; then
        print_success "Container is running"
        
        if is_api_responding; then
            print_success "API is responding at $API_URL"
            print_info "Web interface: $API_URL"
        else
            print_warning "API is not responding (may still be starting up)"
        fi
    else
        print_error "Container is not running"
        print_info "Run '$0 start' to start the service"
    fi
    
    echo ""
    print_info "Container details:"
    docker ps --filter "name=$CONTAINER_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
}

# Function to show help
show_help() {
    echo "Uptime Monitor Pro - Docker Management Script"
    echo ""
    echo "Usage: $0 {command}"
    echo ""
    echo "Commands:"
    echo "  start     - Start the Uptime Monitor containers"
    echo "  stop      - Stop the Uptime Monitor containers"
    echo "  restart   - Restart the Uptime Monitor containers"
    echo "  status    - Check if the containers are running"
    echo "  logs      - Show recent log entries"
    echo "  logs-tail - Follow log entries in real-time"
    echo "  test      - Test API connectivity"
    echo "  shell     - Open shell in container"
    echo "  backup    - Backup application data"
    echo "  restore   - Restore application data"
    echo "  uninstall - Remove Uptime Monitor completely"
    echo "  help      - Show this help message"
    echo ""
    echo "Configuration:"
    echo "  Project Name: $PROJECT_NAME"
    echo "  Compose File: $COMPOSE_FILE"
    echo "  Container Name: $CONTAINER_NAME"
    echo "  API URL: $API_URL"
    echo "  Data Directory: $DATA_DIR"
    echo "  Logs Directory: $LOGS_DIR"
    echo ""
}

# Function to backup data
backup_data() {
    local backup_dir="backup-$(date +%Y%m%d-%H%M%S)"
    
    print_info "Creating backup: $backup_dir"
    
    mkdir -p "$backup_dir"
    
    if [ -d "$DATA_DIR" ]; then
        cp -r "$DATA_DIR" "$backup_dir/"
        print_success "Data directory backed up"
    else
        print_warning "Data directory not found: $DATA_DIR"
    fi
    
    if [ -d "$LOGS_DIR" ]; then
        cp -r "$LOGS_DIR" "$backup_dir/"
        print_success "Logs directory backed up"
    else
        print_warning "Logs directory not found: $LOGS_DIR"
    fi
    
    # Create backup info file
    cat > "$backup_dir/backup-info.txt" << EOF
Uptime Monitor Pro Backup
Created: $(date)
Container: $CONTAINER_NAME
Project: $PROJECT_NAME
EOF
    
    print_success "Backup completed: $backup_dir"
}

# Function to restore data
restore_data() {
    print_warning "This will replace current data with backup data!"
    echo ""
    echo "Available backups:"
    ls -la backup-* 2>/dev/null || echo "No backups found"
    echo ""
    
    read -p "Enter backup directory name: " backup_name
    
    if [ ! -d "$backup_name" ]; then
        print_error "Backup directory not found: $backup_name"
        exit 1
    fi
    
    print_warning "Stopping containers before restore..."
    COMPOSE_CMD=$(get_compose_cmd)
    $COMPOSE_CMD down
    
    if [ -d "$backup_name/data" ]; then
        rm -rf "$DATA_DIR"
        cp -r "$backup_name/data" "$DATA_DIR"
        print_success "Data directory restored"
    fi
    
    if [ -d "$backup_name/logs" ]; then
        rm -rf "$LOGS_DIR"
        cp -r "$backup_name/logs" "$LOGS_DIR"
        print_success "Logs directory restored"
    fi
    
    print_info "Starting containers..."
    $COMPOSE_CMD up -d
    
    print_success "Restore completed"
}

# =============================================================================
# MAIN COMMAND HANDLER
# =============================================================================

COMPOSE_CMD=$(get_compose_cmd)

case "$1" in
    start)
        echo "Starting Uptime Monitor..."
        
        # Check if compose file exists
        if [ ! -f "$COMPOSE_FILE" ]; then
            print_error "Compose file not found: $COMPOSE_FILE"
            print_info "Please run the installer first or check your configuration"
            exit 1
        fi
        
        # Start the services
        $COMPOSE_CMD up -d
        
        # Wait for service to be ready
        sleep 3
        
        if is_container_running "$CONTAINER_NAME"; then
            print_success "Uptime Monitor started successfully!"
            print_info "Web interface: $API_URL"
            
            # Wait a bit more and test API
            sleep 3
            if is_api_responding; then
                print_success "API is responding"
            else
                print_warning "API may still be starting up..."
            fi
        else
            print_error "Failed to start Uptime Monitor"
            print_info "Check the logs for more information: $0 logs"
            exit 1
        fi
        ;;
        
    stop)
        echo "Stopping Uptime Monitor..."
        $COMPOSE_CMD down
        
        if ! is_container_running "$CONTAINER_NAME"; then
            print_success "Uptime Monitor stopped successfully!"
        else
            print_warning "Container may still be stopping..."
        fi
        ;;
        
    restart)
        echo "Restarting Uptime Monitor..."
        $COMPOSE_CMD restart
        
        # Wait for service to be ready
        sleep 3
        
        if is_container_running "$CONTAINER_NAME"; then
            print_success "Uptime Monitor restarted successfully!"
            print_info "Web interface: $API_URL"
            
            if is_api_responding; then
                print_success "API is responding"
            else
                print_warning "API may still be starting up..."
            fi
        else
            print_error "Failed to restart Uptime Monitor"
            print_info "Check the logs for more information: $0 logs"
            exit 1
        fi
        ;;
        
    status)
        show_status
        ;;
        
    logs)
        echo "Recent log entries:"
        echo ""
        $COMPOSE_CMD logs --tail=20 "$CONTAINER_NAME"
        ;;
        
    logs-tail)
        echo "Following logs in real-time (Press Ctrl+C to stop)..."
        echo ""
        $COMPOSE_CMD logs -f "$CONTAINER_NAME"
        ;;
        
    test)
        echo "Testing API connectivity..."
        echo ""
        if is_api_responding; then
            print_success "API is responding"
            
            # Try to get more detailed info
            echo "API Health Check:"
            curl -s "$API_URL/api/health" | python3 -m json.tool 2>/dev/null || curl -s "$API_URL/api/health"
        else
            print_error "API is not responding"
            print_info "Make sure the service is running: $0 status"
        fi
        ;;
        
    shell)
        echo "Opening shell in container..."
        if is_container_running "$CONTAINER_NAME"; then
            docker exec -it "$CONTAINER_NAME" sh
        else
            print_error "Container is not running"
            print_info "Start the service first: $0 start"
            exit 1
        fi
        ;;
        
    backup)
        backup_data
        ;;
        
    restore)
        restore_data
        ;;
        
    uninstall)
        echo "Uninstalling Uptime Monitor Pro..."
        echo ""
        print_warning "This will permanently remove all containers, images, and data!"
        echo ""
        read -p "Are you sure you want to continue? (y/N): " -n 1 -r
        echo
        
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo "Stopping containers..."
            $COMPOSE_CMD down
            
            echo "Removing images..."
            docker rmi uptime-monitor-pro:latest 2>/dev/null || true
            
            echo "Removing volumes..."
            $COMPOSE_CMD down -v
            
            echo "Removing data directories..."
            rm -rf "$DATA_DIR" "$LOGS_DIR"
            
            echo "Removing configuration files..."
            rm -f "$COMPOSE_FILE" ".env" "nginx.conf"
            
            print_success "Uptime Monitor Pro has been completely removed"
        else
            print_info "Uninstall cancelled"
        fi
        ;;
        
    help|--help|-h)
        show_help
        ;;
        
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
