#!/bin/bash

# Uptime Monitor Pro - One-Click Install Script for Docker
# Version 1.0.0
# Compatible with Docker and Docker Compose

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="uptime-monitor"
COMPOSE_FILE="docker-compose.yml"
ENV_FILE=".env"
DATA_DIR="./data"
LOGS_DIR="./logs"

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${PURPLE}================================${NC}"
    echo -e "${PURPLE}  Uptime Monitor Pro Installer${NC}"
    echo -e "${PURPLE}  Docker Edition${NC}"
    echo -e "${PURPLE}================================${NC}"
    echo ""
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check Docker installation
check_docker() {
    print_status "Checking Docker installation..."
    
    if ! command_exists docker; then
        print_error "Docker is not installed"
        print_info "Please install Docker first:"
        print_info "  - Ubuntu/Debian: https://docs.docker.com/engine/install/ubuntu/"
        print_info "  - macOS: https://docs.docker.com/desktop/mac/install/"
        print_info "  - Windows: https://docs.docker.com/desktop/windows/install/"
        exit 1
    fi
    
    # Check if Docker is running
    if ! docker info >/dev/null 2>&1; then
        print_error "Docker is not running"
        print_info "Please start Docker and try again"
        exit 1
    fi
    
    print_status "✅ Docker is installed and running"
}

# Function to check Docker Compose installation
check_docker_compose() {
    print_status "Checking Docker Compose installation..."
    
    if ! command_exists docker-compose && ! docker compose version >/dev/null 2>&1; then
        print_error "Docker Compose is not installed"
        print_info "Please install Docker Compose first:"
        print_info "  - Ubuntu/Debian: sudo apt install docker-compose-plugin"
        print_info "  - Or follow: https://docs.docker.com/compose/install/"
        exit 1
    fi
    
    # Check which version of compose to use
    if docker compose version >/dev/null 2>&1; then
        COMPOSE_CMD="docker compose"
        print_status "✅ Using Docker Compose V2"
    else
        COMPOSE_CMD="docker-compose"
        print_status "✅ Using Docker Compose V1"
    fi
}

# Function to create project directory structure
create_project_structure() {
    print_status "Creating project directory structure..."
    
    # Create data and logs directories
    mkdir -p "$DATA_DIR" "$LOGS_DIR"
    
    # Set proper permissions
    chmod 755 "$DATA_DIR" "$LOGS_DIR"
    
    print_status "✅ Project directories created"
}

# Function to copy project files
copy_project_files() {
    print_status "Copying project files..."
    
    # Get the directory where this script is located
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    
    # Copy application files
    cp "$SCRIPT_DIR/../package.json" "$SCRIPT_DIR/"
    cp "$SCRIPT_DIR/../uptime-monitor-api.js" "$SCRIPT_DIR/"
    cp "$SCRIPT_DIR/../index.html" "$SCRIPT_DIR/"
    cp "$SCRIPT_DIR/../recovery.html" "$SCRIPT_DIR/"
    
    print_status "✅ Project files copied"
}

# Function to create environment file
create_env_file() {
    print_status "Creating environment configuration..."
    
    cat > "$ENV_FILE" << EOF
# Uptime Monitor Pro - Environment Configuration
# Generated by installer on $(date)

# Application Settings
NODE_ENV=production
PORT=3000

# Data Persistence
DATA_PATH=/app/secure-data
LOGS_PATH=/app/logs

# Optional: Custom domain for Traefik labels
# DOMAIN=uptime.yourdomain.com

# Optional: SSL/TLS Configuration
# SSL_CERT_PATH=/etc/nginx/ssl/cert.pem
# SSL_KEY_PATH=/etc/nginx/ssl/key.pem
EOF
    
    print_status "✅ Environment file created: $ENV_FILE"
}

# Function to create nginx configuration
create_nginx_config() {
    print_status "Creating Nginx configuration..."
    
    cat > nginx.conf << 'EOF'
events {
    worker_connections 1024;
}

http {
    upstream uptime_monitor {
        server uptime-monitor:3000;
    }

    server {
        listen 80;
        server_name _;

        # Redirect HTTP to HTTPS (uncomment for production)
        # return 301 https://$server_name$request_uri;

        location / {
            proxy_pass http://uptime_monitor;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # HTTPS server (uncomment for production)
    # server {
    #     listen 443 ssl http2;
    #     server_name _;
    #
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #
    #     location / {
    #         proxy_pass http://uptime_monitor;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }
    # }
}
EOF
    
    print_status "✅ Nginx configuration created"
}

# Function to build and start containers
build_and_start() {
    print_status "Building Docker image..."
    
    # Build the image
    docker build -t uptime-monitor-pro:latest .
    
    print_status "✅ Docker image built successfully"
    
    print_status "Starting containers..."
    
    # Start the services
    $COMPOSE_CMD up -d
    
    print_status "✅ Containers started successfully"
}

# Function to wait for service to be ready
wait_for_service() {
    print_status "Waiting for service to be ready..."
    
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s http://localhost:3000/api/health >/dev/null 2>&1; then
            print_status "✅ Service is ready!"
            return 0
        fi
        
        print_status "Attempt $attempt/$max_attempts - waiting for service..."
        sleep 2
        ((attempt++))
    done
    
    print_warning "Service may still be starting up..."
    return 1
}

# Function to show container status
show_container_status() {
    print_status "Container status:"
    echo ""
    $COMPOSE_CMD ps
    echo ""
}

# Function to create management script
create_management_script() {
    print_status "Creating management script..."
    
    cat > manage-uptime-monitor.sh << 'EOF'
#!/bin/bash

# Uptime Monitor Pro - Docker Management Script
# Usage: ./manage-uptime-monitor.sh {start|stop|restart|status|logs|uninstall}

PROJECT_NAME="uptime-monitor"
COMPOSE_FILE="docker-compose.yml"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Function to check Docker Compose command
get_compose_cmd() {
    if docker compose version >/dev/null 2>&1; then
        echo "docker compose"
    else
        echo "docker-compose"
    fi
}

# Function to show service status
show_status() {
    echo "Checking Uptime Monitor status..."
    echo ""
    
    COMPOSE_CMD=$(get_compose_cmd)
    
    if $COMPOSE_CMD ps | grep -q "uptime-monitor-pro.*Up"; then
        print_success "Container is running"
        
        if curl -s http://localhost:3000/api/health > /dev/null 2>&1; then
            print_success "API is responding at http://localhost:3000"
            print_info "Web interface: http://localhost:3000"
        else
            print_warning "API is not responding (may still be starting up)"
        fi
    else
        print_error "Container is not running"
        print_info "Run './manage-uptime-monitor.sh start' to start the service"
    fi
}

# Function to show help
show_help() {
    echo "Uptime Monitor Pro - Docker Management Script"
    echo ""
    echo "Usage: $0 {command}"
    echo ""
    echo "Commands:"
    echo "  start     - Start the Uptime Monitor containers"
    echo "  stop      - Stop the Uptime Monitor containers"
    echo "  restart   - Restart the Uptime Monitor containers"
    echo "  status    - Check if the containers are running"
    echo "  logs      - Show recent log entries"
    echo "  logs-tail - Follow log entries in real-time"
    echo "  test      - Test API connectivity"
    echo "  uninstall - Remove Uptime Monitor completely"
    echo "  help      - Show this help message"
    echo ""
    echo "Configuration:"
    echo "  Project Name: $PROJECT_NAME"
    echo "  Compose File: $COMPOSE_FILE"
    echo ""
}

COMPOSE_CMD=$(get_compose_cmd)

case "$1" in
    start)
        echo "Starting Uptime Monitor..."
        $COMPOSE_CMD up -d
        sleep 3
        if $COMPOSE_CMD ps | grep -q "uptime-monitor-pro.*Up"; then
            print_success "Uptime Monitor started successfully!"
            print_info "Web interface: http://localhost:3000"
        else
            print_error "Failed to start Uptime Monitor"
            print_info "Check the logs: $0 logs"
            exit 1
        fi
        ;;
        
    stop)
        echo "Stopping Uptime Monitor..."
        $COMPOSE_CMD down
        print_success "Uptime Monitor stopped successfully!"
        ;;
        
    restart)
        echo "Restarting Uptime Monitor..."
        $COMPOSE_CMD restart
        sleep 3
        if $COMPOSE_CMD ps | grep -q "uptime-monitor-pro.*Up"; then
            print_success "Uptime Monitor restarted successfully!"
            print_info "Web interface: http://localhost:3000"
        else
            print_error "Failed to restart Uptime Monitor"
            print_info "Check the logs: $0 logs"
            exit 1
        fi
        ;;
        
    status)
        show_status
        ;;
        
    logs)
        echo "Recent log entries:"
        echo ""
        $COMPOSE_CMD logs --tail=20 uptime-monitor
        ;;
        
    logs-tail)
        echo "Following logs in real-time (Press Ctrl+C to stop)..."
        echo ""
        $COMPOSE_CMD logs -f uptime-monitor
        ;;
        
    test)
        echo "Testing API connectivity..."
        echo ""
        if curl -s http://localhost:3000/api/health > /dev/null 2>&1; then
            print_success "API is responding"
            echo "API Health Check:"
            curl -s http://localhost:3000/api/health | python3 -m json.tool 2>/dev/null || curl -s http://localhost:3000/api/health
        else
            print_error "API is not responding"
            print_info "Make sure the service is running: $0 status"
        fi
        ;;
        
    uninstall)
        echo "Uninstalling Uptime Monitor Pro..."
        echo ""
        print_warning "This will permanently remove all containers, images, and data!"
        echo ""
        read -p "Are you sure you want to continue? (y/N): " -n 1 -r
        echo
        
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo "Stopping containers..."
            $COMPOSE_CMD down
            
            echo "Removing images..."
            docker rmi uptime-monitor-pro:latest 2>/dev/null || true
            
            echo "Removing volumes..."
            $COMPOSE_CMD down -v
            
            echo "Removing data directories..."
            rm -rf ./data ./logs
            
            print_success "Uptime Monitor Pro has been completely removed"
        else
            print_info "Uninstall cancelled"
        fi
        ;;
        
    help|--help|-h)
        show_help
        ;;
        
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
EOF
    
    chmod +x manage-uptime-monitor.sh
    print_status "✅ Management script created: manage-uptime-monitor.sh"
}

# Function to display completion message
show_completion_message() {
    echo ""
    echo -e "${GREEN}================================${NC}"
    echo -e "${GREEN}  Installation Complete! 🎉${NC}"
    echo -e "${GREEN}================================${NC}"
    echo ""
    echo -e "${CYAN}Uptime Monitor Pro has been successfully installed with Docker!${NC}"
    echo ""
    echo -e "${YELLOW}Access your monitoring dashboard:${NC}"
    echo -e "   🌐 ${BLUE}http://localhost:3000${NC}"
    echo ""
    echo -e "${YELLOW}Management commands:${NC}"
    echo -e "   📁 ${BLUE}./manage-uptime-monitor.sh start${NC}     - Start containers"
    echo -e "   📁 ${BLUE}./manage-uptime-monitor.sh stop${NC}      - Stop containers"
    echo -e "   📁 ${BLUE}./manage-uptime-monitor.sh restart${NC}   - Restart containers"
    echo -e "   📁 ${BLUE}./manage-uptime-monitor.sh status${NC}    - Check status"
    echo -e "   📁 ${BLUE}./manage-uptime-monitor.sh logs${NC}     - View logs"
    echo -e "   📁 ${BLUE}./manage-uptime-monitor.sh uninstall${NC} - Remove completely"
    echo ""
    echo -e "${YELLOW}Docker commands:${NC}"
    echo -e "   🐳 ${BLUE}docker-compose up -d${NC}              - Start services"
    echo -e "   🐳 ${BLUE}docker-compose down${NC}               - Stop services"
    echo -e "   🐳 ${BLUE}docker-compose logs -f${NC}            - Follow logs"
    echo ""
    echo -e "${YELLOW}Data persistence:${NC}"
    echo -e "   📂 ${BLUE}./data${NC}                            - Application data"
    echo -e "   📂 ${BLUE}./logs${NC}                            - Application logs"
    echo ""
    echo -e "${YELLOW}Container status:${NC}"
    show_container_status
    echo ""
    echo -e "${PURPLE}Next steps:${NC}"
    echo -e "   1. Open ${BLUE}http://localhost:3000${NC} in your browser"
    echo -e "   2. Add your first server to monitor"
    echo -e "   3. Configure SMS alerts (optional)"
    echo -e "   4. Set up FTP upload (optional)"
    echo ""
    echo -e "${GREEN}Happy monitoring! 🚀${NC}"
}

# Main installation function
main() {
    print_header
    
    # Check Docker installation
    check_docker
    check_docker_compose
    
    print_status "Starting Docker installation process..."
    echo ""
    
    # Installation steps
    create_project_structure
    copy_project_files
    create_env_file
    create_nginx_config
    build_and_start
    create_management_script
    wait_for_service
    
    show_completion_message
}

# Run main function
main "$@"
